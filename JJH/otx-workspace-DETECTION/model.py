model=dict(
    train_cfg=dict(
        assigner=dict(
            type='ATSSAssigner',
            topk=9),
        allowed_border=-1,
        pos_weight=-1,
        debug=False),
    test_cfg=dict(
        nms_pre=1000,
        min_bbox_size=0,
        score_thr=0.05,
        nms=dict(
            type='nms',
            iou_threshold=0.5),
        max_per_img=100),
    backbone=dict(
        type='mobilenetv2_w1',
        out_indices=(2, 3, 4, 5),
        frozen_stages=-1,
        norm_eval=False,
        pretrained=True),
    type='CustomATSS',
    neck=dict(
        type='FPN',
        in_channels=[24, 32, 96, 320],
        out_channels=64,
        start_level=1,
        add_extra_convs='on_output',
        num_outs=5,
        relu_before_extra_convs=True),
    bbox_head=dict(
        type='CustomATSSHead',
        num_classes=2,
        in_channels=64,
        stacked_convs=4,
        feat_channels=64,
        anchor_generator=dict(
            type='AnchorGenerator',
            ratios=[1.0],
            octave_base_scale=8,
            scales_per_octave=1,
            strides=[8, 16, 32, 64, 128]),
        bbox_coder=dict(
            type='DeltaXYWHBBoxCoder',
            target_means=[0.0, 0.0, 0.0, 0.0],
            target_stds=[0.1, 0.1, 0.2, 0.2]),
        loss_cls=dict(
            type='FocalLoss',
            use_sigmoid=True,
            gamma=2.0,
            alpha=0.25,
            loss_weight=1.0),
        loss_bbox=dict(
            type='GIoULoss',
            loss_weight=2.0),
        loss_centerness=dict(
            type='CrossEntropyLoss',
            use_sigmoid=True,
            loss_weight=1.0),
        use_qfl=False,
        qfl_cfg=dict(
            type='QualityFocalLoss',
            use_sigmoid=True,
            beta=2.0,
            loss_weight=1.0)))
load_from='https://storage.openvinotoolkit.org/repositories/openvino_training_extensions/models/object_detection/v2/mobilenet_v2-atss.pth'
resume_from=None
checkpoint_config=dict(
    interval=1,
    max_keep_ckpts=1)
task='detection'
dist_params=dict(
    backend='nccl',
    linear_scale_lr=True)
cudnn_benchmark=True
seed=5
deterministic=False
hparams=dict(
    dummy=0)
task_adapt=dict(
    op='REPLACE',
    type='default_task_adapt',
    efficient_mode=False,
    use_adaptive_anchor=True)
log_level='INFO'
log_config=dict(
    interval=100,
    hooks=[
        dict(type='TextLoggerHook',
            ignore_last=False),
        dict(type='TensorboardLoggerHook')])
optimizer=dict(
    type='SGD',
    lr=0.001,
    momentum=0.9,
    weight_decay=0.0001)
optimizer_config=dict(
    type='OptimizerHook',
    grad_clip=dict(
        max_norm=35,
        norm_type=2))
runner=dict(
    type='EpochRunnerWithCancel',
    max_epochs=30)
workflow=[('train', 1)]
lr_config=dict(
    policy='ReduceLROnPlateau',
    metric='mAP',
    patience=5,
    iteration_patience=0,
    interval=1,
    min_lr=1e-06,
    warmup='linear',
    warmup_iters=200,
    warmup_ratio=0.3333333333333333)
evaluation=dict(
    interval=1,
    metric='mAP',
    save_best='mAP')
early_stop_metric='mAP'
custom_hooks=[
    dict(type='LazyEarlyStoppingHook',
        start=3,
        patience=10,
        iteration_patience=0,
        metric='mAP',
        interval=1,
        priority=75),
    dict(type='EMAHook',
        priority='ABOVE_NORMAL',
        momentum=0.1)]
ignore=False
adaptive_validation_interval=dict(
    max_interval=5,
    enable_adaptive_interval_hook=True,
    enable_eval_before_run=True)
fp16=dict(
    loss_scale=512.0,
    bf16_training=False)